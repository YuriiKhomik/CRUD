{"mappings":"AA8KA,SAASA,EAASC,GACd,MAAMC,EAAS,CACXC,WAAY,YACHC,KAAH,OACFC,MAAG,OACHC,WAAQ,UAOhB,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzBC,YAAW,KACPF,EAAQN,EAAOD,GAAM,GACtB,IAAI,G,EAIfU,iBACI,IACI,MAAMN,EAAQL,EAAS,SACjBI,EAAOJ,EAAS,QAChBG,EAAaH,EAAS,cACtBM,EAAaN,EAAS,cAEtBE,QAAeK,QAAQK,IAAI,CAACP,EAAOD,EAAMD,EAAYG,IAG0B,OAFrFO,QAAQC,IAAIZ,GAELA,C,CACT,MAAOa,GACLF,QAAQC,IAAIC,E,GAIpBC,GAAgBC,MAAKf,GAAUW,QAAQC,IAAIZ","sources":["src/partials/async.js"],"sourcesContent":["// function getFruit(name) {\n//     const fruits = {\n//         strawberry: 'полуниця',\n//         kiwi: 'ківі',\n//         apple: 'ябко',\n//     };\n\n//     return Promise.resolve(fruits[name]);\n// }\n\n// getFruit('apple').then(apple => console.log(apple));\n// // or\n// getFruit('apple').then(console.log);\n\n// // робимо функцію асинхронною\n\n// // function declaration\n// async function getFruit(name) {}\n\n// // function expression\n// const fn = async function getFruit(name) {};\n\n// // arrow function\n// const arr = async () => {};\n\n// // object method\n// const x = {\n//     async getname() {},\n// };\n\n// // class method\n// class X {\n//     async getName (){}\n// }\n\n// // найголовніше правило - асинхронна функція завжди повертає проміс\n// async function getFruit(name) {\n//     const fruits = {\n//         strawberry: 'полуниця',\n//         kiwi: 'ківі',\n//         apple: 'ябко',\n//     };\n\n//     return 5;\n// };\n\n// getFruit('apple').then(apple => console.log(apple));\n\n// function getFruit(name) {\n//     const fruits = {\n//         strawberry: 'полуниця',\n//         kiwi: 'ківі',\n//         apple: 'ябко',\n//         blackberry: 'ожинка',\n//     };\n\n//     return Promise.resolve(fruits[name]);\n// }\n\n// // в такому випадку ми можемо гарантувати, що яблуко буде виконане перед ківі\n// // але якщо нам потрібно буде ще одинн проміс робити, то це виходить багато сміття\n\n// function makeSmoothie() {\n//     getFruit('apple').then(apple => {\n//         console.log(apple);\n\n//         getFruit('kiwi').then(apple => {\n//             console.log(apple);\n\n//             getFruit('strawberry').then(apple => {\n//                 console.log(apple);\n\n//                 getFruit('blackberry').then(apple => {\n//                     console.log(apple);\n//                 });\n//             });\n//         });\n//     });\n// }\n\n// makeSmoothie();\n\n// // ми кажемо: ей, зачекай, коли цей проміс ресолвнеться, і коли він резолвнеться, запиши значення в змінну apple\n// // праворуч від await завжди має бути проміс\n// // функція виконується асинхронно і крім того, вона вміє призупиняти своє виконання\n// // в тому місці, де зустрівся await - функція призупинилась, а інший код далі виконується\n// // і лише тоді, коли проміс резолвнувся, то виконання цієї функції продовжиться з того рядка, на якому був стоп\n// async function aMakeSmoothie() {\n//     const apple = await getFruit('apple');\n//     console.log(apple);\n\n//     const kiwi = await getFruit('kiwi');\n//     console.log(kiwi);\n\n//     const strawberry = await getFruit('strawberry');\n//     console.log(strawberry);\n\n//     const blackberry = await getFruit('blackberry');\n//     console.log(blackberry);\n// }\n\n// aMakeSmoothie();\n\n// function getFruit(name) {\n//     const fruits = {\n//         strawberry: 'полуничка',\n//         kiwi: 'ківі',\n//         apple: 'ябко',\n//         blackberry: 'ожинка',\n//     };\n//     // // проміс, в який передаємо функцію, всередині якої запускаємо таймаут, всередині якого даємо функцію, яку потрібно запустити\n//     // return new Promise(resolve => setTimeout(() => resolve(fruits[name]), 500));\n\n//     // or:\n\n//     return new Promise(resolve => {\n//         setTimeout(() => {\n//             resolve(fruits[name]);\n//         }, 500);\n//     });\n// }\n\n// // це одна людина ходить за кожним фруктом окремо (тобто функції виконуються по черзі)\n// // і відповідно, такий запит буде виконуватись 2000 мілісекунд\n// // такий варік ок тоді, коли потрібно виконувати кожен наступний проміс по результату іншого\n\n// async function aMakeSmoothie() {\n//     console.time('aMakeSmoothie');\n\n//     const apple = await getFruit('apple');\n//     console.log(apple);\n\n//     const kiwi = await getFruit('kiwi');\n//     console.log(kiwi);\n\n//     const strawberry = await getFruit('strawberry');\n//     console.log(strawberry);\n\n//     const blackberry = await getFruit('blackberry');\n//     console.log(blackberry);\n\n//     console.timeEnd('aMakeSmoothie');\n// }\n\n// aMakeSmoothie();\n\n// // а цей варіант ок тоді, коли потрібно, щоби все разом отримати\n// async function aMakeSmoothie() {\n//     // console.time('aMakeSmoothie');\n\n//     // повертаємо проміси кожного фрукта:\n//     const apple = getFruit('apple');\n//     const kiwi = getFruit('kiwi');\n//     const strawberry = getFruit('strawberry');\n//     const blackberry = getFruit('blackberry');\n\n//     // console.log(apple);\n//     // console.log(kiwi);\n//     // console.log(strawberry);\n//     // console.log(blackberry);\n\n//     // і робимо всі 4 запити на проміси паралельно\n//     // в такому випадку проміси будуть виконані за 500 мілісекунд\n//     // Promise.all чекає виконання всіх промісів і повертає проміс тоді, коли останній проміс ресолвнеться\n//     const fruits = await Promise.all([apple, kiwi, strawberry, blackberry]);\n//     console.log(fruits);\n\n//     // console.timeEnd('aMakeSmoothie');\n// }\n\n// aMakeSmoothie();\n\n// TRY...CATCH\n\nfunction getFruit(name) {\n    const fruits = {\n        strawberry: 'полуничка',\n        kiwi: 'ківі',\n        apple: 'ябко',\n        blackberry: 'ожинка',\n    };\n    // // проміс, в який передаємо функцію, всередині якої запускаємо таймаут, всередині якого даємо функцію, яку потрібно запустити\n    // return new Promise(resolve => setTimeout(() => resolve(fruits[name]), 500));\n\n    // or:\n\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(fruits[name]);\n        }, 500);\n    });\n}\n\nasync function aMakeSmoothie() {\n    try {\n        const apple = getFruit('apple');\n        const kiwi = getFruit('kiwi');\n        const strawberry = getFruit('strawberry');\n        const blackberry = getFruit('blackberry');\n\n        const fruits = await Promise.all([apple, kiwi, strawberry, blackberry]);\n        console.log(fruits);\n        // асинхронна функція повертає проміс і те, що ми повернемо у зовнішній код - буде результат цього промісу\n        return fruits;\n    } catch (error) {\n        console.log(error);\n    }\n}\n// асинхронна функція повертає проміс і те, що ми повернемо у зовнішній код - буде результат цього промісу\naMakeSmoothie().then(fruits => console.log(fruits));\n"],"names":["$90d330ff918895d0$var$getFruit","name","fruits","strawberry","kiwi","apple","blackberry","Promise","resolve","reject","setTimeout","async","all","console","log","error","$90d330ff918895d0$var$aMakeSmoothie","then"],"version":3,"file":"index.ddf52ec9.js.map"}